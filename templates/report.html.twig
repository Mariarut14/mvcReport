{# templates/about.html.twig #}

{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
<h1>Redovisning</h1>
<div class="two-col-layout">
    <article class=article>
        <h2 id="kmom01">kmom01</h2> 
        <p>Jag har tidigare träffat på lite objektorienterad
        programmering när jag läste python. Vi gick inte in så 
        djupt på det, men jag känner igen konceptet med parametrar 
        och metoder och att det kan vara globala eller dolda parametrar.
        Däremot är det nytt med begreppet "namespace". Grundtanken 
        verkar vara lika i alla fall.</p>
        <p>En klass innehåller parametrar (variabler) och även metod(er) (funktion) 
        som kan använda parametrarna. Parametrarna kan vara bestämda eller också 
        kan användaren bestämma dem. Klassen kan returnera någon form av data. Klassen 
        tillhör ett namespace vilket gör att samma variabelnamn kan användas i en 
        annan klass med ett annat namespace.</p>
        <p>Kodbasen i "Report" påminner om de vi använt tidigare, fast en slags 
        blandning. Vi har src-filer som bearbetar och renderar data och template-filer 
        som visar upp på webbsidan. CSS finns som vanligt och bilder. En skillnad mot 
        förra området är att vi nu har en fil för både route och funktioner där 
        det tidigare var en routefil och en funktionsfil. Jag har inte helt förstått 
        hur symfony jobbar, men tycker ändå att jag till viss del förstår upplägget.</p>
        <p>De områden i jag skulle vilja fördjupa mig i är "Design patterns" och "Errors 
        and exceptions". Det är viktigt med tydlig struktur i koden tydker jag och intressant 
        att få se olika sätt att bygga upp en struktur. Felhantering är en viktig del i 
        programmerandet, speciellt som nybörjare och en intressant tanke att göra egna system 
        för att upptäcka fel.</p>
        <p>Min TIL för det här kursmomentet är att även kommentarer i koden kan användas och 
        att det alltså är viktigt hur jag skriver dem. Jag förstod först inte hur navbaren kunde 
        hitta rätt route, eftersom jag inte tyckte att den stod någonstans. Till sist förstod 
        jag att den måste läsa av kommentaren, vilket blev en aha-upplevelse.</p>
        <h2 id="kmom02">kmom02</h2> 
        <p>När jag skapar en klass som är ett arv så kan den klassen 
        använda alla metoder och variabler som finns i "parent-class", men den kan även 
        lägga till nya metoder och variabler så att det blir en specialiserad form av "parent-class". 
        I en composition-class används flera objekt från en annan klass för att skapa en 
        ny klass. T.ex. compositionen "bibliotek" består av flera objekt från klassen "bok". 
        Ett interface är klass med en samling metoder. Om en klass ska kunna implementera ett interface 
        måste den innehålla alla metoder som finns i interfacet. Ett interface innehåller inte 
        variabler. Ett trait är en klass som också endast innehåller metoder. En klass kan sedan "ärva" 
        metoder från flera olika traits och är alltså inte begränsade till endast en klass, 
        till skillnad från när det är en arvs-klass.</p>
        <p>Jag hade svårt att komma igång med uppgiften och att få ett bra 
        upplägg på compositionsklasserna. Det var utmanande att få till delen där antalet kort skulle minska
        och att det inte gick att bara dra slumpmässigt från en kortlek. Till skillnad från tärningsspelet fick 
        det ju inte vara samma kort två gånger. Jag kom ändå på ganska snabbt hur jag kunde använda session 
        för att spara kortleken i. Jag löste det till sist genom att ha kortleken som variabel i hand-klassen 
        ,för då kunde jag lägga in en "decimerad" kortlek som parameter och dra från den. Ett misstag jag 
        gjorde i början var att jag omvandlade kortleken till sträng direkt och sparade i session. När jag 
        sedan skulle använda den så fungerade inte metoderna eftersom de byggde på objekt i int-format. </p>
        <p>Det som jag skulle kunna utveckla är bl.a. att jag inte använt något formulär, och 
        alltså inte get/post. Eftersom uppgifterna gick att lösa ändå och det tog mycket tid så kände jag 
        att jag inte hade tid att fixa med det. Det känns även som att jag har mycket kod i själva 
        controllern och att det antagligen skulle kunna minskas ned med bättre/fler metoder i klasserna.</p>
        <p>Jag jobbade inte så mycket med modellering, utan gjorde UML-diagrammet i efterhand. 
        Det är nog bra att fundera mer innan, men jag kände att jag inte förstått helt hur man skulle tänka 
        med klasserna och då var det lättare att bara köra igång och lära sig allt eftersom. Nästa gång 
        kommer det vara lättare att göra en modell innan. </p>
        <p>Min TIL för kmom02 är nog när jag insåg att när jag skapar en instans av en klass så är det ett 
        objekt som har vissa egenskaper som t.ex. att det har en viss typ. Så fort jag ändrat en egenskap,
         till exempel gjort en array eller string av det så funkar inte objektet som det gjorde tidigare. </p>
        <h2 id="kmom03">kmom03</h2> 
        <p>När jag började fundera på hur jag skulle lägga upp spelet tyckte jag att det fungerade bra 
        att först skissa en plan. Eftersom jag hade några klasser redan kunde jag fokusera på den logiska 
        ordningen och då var det bra att tänka ut ett flödesschema. Jag kan också inse att pseudokod kan 
        vara ett bra verktyg för att få struktur på en djupare nivå innan man börjar skriva "riktig" kod.</p>
        p>Det som gick bäst i uppgiften var de logiska delarna, att fundera ut hur metoderna skulle 
        fungera. Eftersom jag redan i flödesschemat hade kommit fram till ungefär vilka funktioner 
        som krävdes så var det bara att försöka får ner koden så att det fungerade som jag tänkt. Jag 
        hade tidigt bestämt mig för att jag ville ha med sannolikheten och använda den i funktionen som 
        bestämde om banken skulle ta ett kort till. I början lade jag alla metoder i "Hand"-klassen, men
        jag kom på att det blev för spretig klass med funktioner som egentligen bara hörde till 
        spelet och inte till "Hand" i allmänhet. Jag skapade därför en ny klass "HandGame" som ärver "Hand" 
        och som innehåller metoderna som är specifika för spelet. Det var roligt att jobba med spelet, att klura 
        på hur metoderna skulle fungera och även samspelet mellan routerna och templatefilerna. 
        Jag skulle behöva jobba mer med utseendet på sidan, få en snyggare 
        layout, men det tänker jag att jag kan fixa mer med allteftersom. Jag behöver även träna mig på att 
        ha mindre kod i routen och mer i klasserna. Jag försökte tänka på det men har svårt att veta hur 
        jag t.ex. ska få bort set/get till sessionen.</p>
        <p>Jag börjar komma in i Symfony och hur man använder ramverket, och kan se att det finns fördelar 
        med det. Jag vet för lite om alla delar för att verkligen förstå hur man kan ha nytta av det men jag tänker 
        att när man använt det några gånger så har man en bra grundstruktur att luta sig mot och som går att utveckla 
        mycket. När jag googlat för att hitta olika lösningar märks det även att det är ett system som 
        är relativt vanligt vilket är en fördel och att det finns mycket dokumentation om det.</p>
        <p>Min TIL för det här kursmomentet är tanken att försöka få bort onödig kod, t.ex. else-satser. Jag 
        lyckades inte få bort alla men en hel del. Jag gillar tanken att försöka skriva så enkelt och effektivt 
        som möjligt.</p>
        <h2 id="kmom04">kmom04</h2> 
        <p>Jag tyckte att det fungerade bra att använda phpunit. Den visar tydligt vad 
        som behöver fixas till och i rapporterna blir det väldigt visuellt vad som är "täckt" av 
        testerna och vad som inte är det. Lätt att navigera sig mellan rapporterna också.</p>
        <p>Jag lyckades få 100 % täckning på klasserna. Det var förstås en del pill, men med 
        hjälp av de exempel vi fått så att man kunde se hur de kan läggas upp så tyckte jag 
        ändå att det gick ganska lätt. Det var nyttigt att tänka igenom en gång till på 
        hur vissa metoder fungerade. Sen var det ovärderligt att ha phpunit rapporterna där 
        man såg precis vilka delar av klasserna som behövde arbetas mer med.</p>
        <p>Jag tyckte att min kod var enkel att testa, men jag upptäckte ett fel i 
        koden när jag höll på med testerna. Jag hade fel tecken för "or" men det hade funkat 
        ändå när jag körde spelet, antagligen för att spelet bara gick på det första alternativet
        men när jag testade fungerade det inte.</p>
        <p>Jag tror absolut att testbar kod kan vara ett sätt att få snygg kod. Båda bygger 
        lite på att hålla koden enkel och tydlig och att inte krångla till det för mycket. Är det 
        enkelt att läsa och förstå är det också lättare att testa. Jag tycker att snygg kod 
        = bra struktur och det behövs också för att kunna testa koden.</p>
        <p>Min TIL för det kursmomentet är en förståelse för att det är mindre risk att få fel 
        i koden om man ser till att ha små, tydligt avgränsade klasser/metoder. Blir något fel 
        är det lättare att hitta felet och andra delar påverkas inte lika mycket av förändringarna.
        Tidigare tyckte jag att det var bättre att göra så mycket som möjligt på en gång, men 
        jag har tänkt om lite där.</p>
        <h2 id="kmom05">kmom05</h2> 
        <p>Jag tyckte att det var svårt att förstå hur Doctrine fungerade när jag gjorde övningen.
        Det blev lite klarare vad syftet med det var, men jag hängde inte med i vad alla klasser 
        gjorde och olika funktioner, controller mm. Däremot så tänkte jag direkt att det 
        verkligen var ett smidigare sätt att handskas med databaser när man lärt sig det. Att man 
        även kan använda samma kod till olika typer av databaser är förstås ännu bättre.</p>
        <p>När jag skulle bygga upp min applikation bestämde jag mig snabbt för att utgå från en
        tabell från vilken man kan komma vidare till de andra sidorna. När man på de sidorna gjort 
        t.ex. har uppdaterat eller raderat, hamnar man tillbaka till huvudtabellen.</p>
        <p>I början var det lite trixigt att arbeta med ORM, men eftersom jag hade 
        exemplen i övningen att "tjuvkika" på gick det ganska lätt ändå. Jag vet inte om 
        jag förstod allt, men det blev lita klarare allt eftersom jag jobbade på. En sak jag 
        inte förstod var varför vi kunde använda productreciptory istället för managerregistry 
        och vad manager egentligen gör. Det är smidigt att inte behöva skriva långa queries, men 
        samtidigt kändes det som att jag förstod mer vad jag gjorde när vi arbetade mer direkt 
        med databasen. Den stora fördelen med ORM är att man inte behöver kunna ett speciellt 
        databasspråk utan kan använda det språket man har till resten av koden.
        Jag gjorde inte så avancerade saker med databasen, det var ju t.ex. bara en tabell, så det 
        är svårt att veta om det skulle vara lika smidigt att använda ORM om man behöver göra mer 
        komplicerade operationer med databasen.</p>
        <p>Min TIL är att inte ge upp när jag först tycker att jag inte förstår något alls. Efter att 
        ha läst flera gånger förstod jag det lite mer och när jag började arbeta med det förstod jag 
        ännu mer. Jag har också haft nytta av att läsa Doctrines egna dokumentation, något jag haft 
        svårt för tidigare (att läsa officell beskrivning).</p>
        <h2 id="kmom06">kmom06</h2> 
        <p>Jag tyckte att phpmetrics var det tydligaste verktyget av de båda vi testade. Framför allt 
        gillade jag bilden med cirklarna, det var ett bra sätt att grafiskt visa hur koden är och man fick 
        en snabb överblick av var problemen finns. Det fanns mycket statistik men var ändå lätt att 
        navigera och hitta olika mätvärden. Sidan "Object oriented metrics" var den sidan jag gillade 
        bäst. Det var lagom mycket information om storlek och komplexitet. "Violations" var också ett 
        viktigt mätvärde att ha koll på, det var det enda stället jag fick fram att min ena 
        controller inte hade single responsability.</p>
        <p>Scrutinizer är enklare att tyda och mer överskådlig, men ger inte lika mycket information. 
        Speciellt inte för mig eftersom jag inte fick någon rapport om coupling och cohesion av 
        någon anledning. "Issues" var användbar eftersom det visar på fel men också tydligt talar 
        om vad man kan göra åt felen i vissa fall (i alla fall med onödig kod). Ratingen som man får
        på första sidan ger förstås en sammanfattande bild av hur koden fungerar sammantaget 
        och även täckningen syns tydligt med hjälp av badges.Jag fick kodtäckning på 19% och kodkvalité 
        9.95 (very good).</p>
        <p>Jag anser att badges ger en viss bild av kvalitén, men att de även är ganska begränsade. 
        Det spelar ganska stor roll hur komplext projektet är vad du får för omdöme. Ett väldigt litet 
        och okomplicerat projekt är förstås lättare att hålla "clean" och lätt att testa  och hålla nere 
        komplexiteten. Samtidigt tycker jag att det är viktigt att ha viss koll på vilket "betyg" koden 
        får, man kan ju alltid förbättra den, och då hjälper sådana verktyg som Scrutinizer och 
        Phpmetrics till. kodkvalité är att ha gjort så bra kod som möjligt i förhållande till uppgiftens 
        komplexitet och storlek.</p>
        <p>Min TIL för det här området är egentligen mer en förundran över hur många program/paket det 
        finns som kan hjälpa till att skriva bra kod. Dels med kodstil, tabar, mellanrum och sådant, men 
        även verktyg som hjälper till att hitta felaktigheter i koden och till och med ger tips om 
        förbättringar.</p>
        <h2 id="kmom10">kmom10</h2> 
        <p>Krav 1-3</p>
        <p>Jag har valt att göra ett äventyrsspel där målet är att samla ingredienser för att 
        kunna baka en tårta. Jag använder tre tabeller i en SQLite databas (item, bin och room)och har 
        alltså tre klasser. Själva spelet består av en template där bakgrundsbild och vilka extra saker 
        som ska finnas i rummet bestäms av vilka parametrar som skickas med av controllern. Det finns en 
        korg där spelaren samlar på sig saker som kan behövas, och när rätt saker finns i korgen är spelet klart. 
        Det går även att plocka ut saker ur korgen. De hamnar då tillbaka till sin "vanliga" plats. När 
        saker flyttas mellan rum och korg sker alltså en förflyttning mellan två tabeller, item och bin. 
        Rummet är uppdelat i ett grid (9x7) så att det finns goda möjligheter att variera var extra-sakerna 
        ska placeras ut.</p>
        <p>När det gäller layouten har jag ändrat färgsättningen till att vara i olika nyanser av grönt.
        Det är även en annan stil på fonterna, en lite mer informell stil på rubrikerna. I headern ser navigeringen 
        annorlunda ut med "knappar" i annan färg och footern har fått gradering i färgen.</p>
        <p>Jag har en readme-fil som beskriver det som finns under repot "Report". Där finns även information 
        om att jag använt PHP pch Symfony och vilka versioner. För att man ska kunna klona repot har jag med 
        en länk till mitt git-repo och beskrivning av hur man går tillväga. Avslutningsvis finns där även 
        länkar till badges  i Scrutinizer. Förutom kodtäckning får jag bra värden. Eftersom jag inte har 
        enhetstester på varken controllers eller databaser så blir det en väldigt liten andel av koden som blir 
        testad.</p>
        <p>Krav 4</p>
        <p>Jag har skapat en JSON API med 5 olika router. De första tre visar allt innehåll i respektive tabell. 
        Sedan finns även en route där det listas vilka saker som har ett villkor. I den sista routern kan man välja 
        ett rum och sedan visas alla saker som hör till det rummet. Tanken är även att man under spelets gång ska kunna 
        gå till API-sidan och därför finns även en länk tillbaka till spelet. API-routerna lade jag i en ny controller, 
        ApiAdventureController.</p>
        <p>Krav 5</p>
        <p>Som jag tidigare nämnt använde jag mig av en SQLite databas i spelet. Det kändes smidigt att använda SQLite 
        eftersom jag då kunde ha den i en fil. Genom att ha en tabell för sakerna som ligger i rummen (tabell "item") 
        och en för de som lagts i korgen (tabell "bin") blev det enkelt att hantera flyttandet av sakerna. Jag kunde även 
        koppla en bild, ett rum och en plats (och villkor på vissa) till varje sak på ett smidigt sett. I room-tabellen 
        kopplade jag rum till pilarna som navigerade mellan rummen. Allt detta gjorde att jag sedan bara behövde ha 
        en template och sedan skickade routern med data om vilken bild som skulle vara bakgrund, var pilarna skulle länka 
        till och vilka saker som var kopplade till just det rummet. Korgen med sina hämtade saker syns i alla rum. I 
        början när jag planerade spelet tänkte jag först att jag skulle använda sessioner för att ha ordning på vilka saker 
        som "plockats", men det skulle ha blivit mycket data att lägga in och hämta. </p>
        <p>Jag skapade en kopia av databasen som används när databasen återskapas i början av varje nytt spel genom att 
        kopian kopieras till databs-filen. I början är item-tabellen full och bin-tabellen tom. På sidan proj/about/database 
        har jag ett ER-diagram och har beskrivit lite mer om databasen.</p>
        <p>Krav 6</p>
        <p>En del som jag är nöjd med och som jag tycker är lite extra, är hur jag arbetade med villkor. Genom att lägga 
        till ett attribut "condition" på vissa saker gjorde jag spelet lite mer avancerat. Man behöver t.ex. ha hämtat en 
        sax för att kunna få tag i jordgubbarna eller ha en lampa för att kunna se (och hämta) saker 
        i skafferiet. Jag lade då även till flashmeddelanden som berättar vad som saknas för att kunna hämta just den saken.</p>
        <p>Jag tycker också att jag lyckats bra med att skapa en "popup"-fusklapp på startsidan till spelet.</p>
        <p>Det sista jag vill lyfta som är lite extra är att jag använder en rullista på JSON-sidan när man ska välja vilket 
        rum man vill se saker ifrån. Jag skulle ha kunnat haft fyra olika länkar, men tyckte att det vore smidigare att kunna 
        välja på det sättet. Jag använder sedan Request i routern för att ta emot vilket rum användaren vill se saker ifrån.</p>
        <p>Allmänt om projektet</p>
        <p>Som vanligt är projektet det som är roligast att jobba med i kursen. Vid det laget har man 
        kommit in i metoderna och alla program är installerade och funkar. Det var bra att det fanns 
        flera olika sorts projekt att välja mellan. Först tänkte jag ta kortspelet eftersom det kändes 
        mest likt det vi redan gjort, men sen ändrade jag mig och bestämde att jag skulle utmana mig själv
        med äventyrsspelet. Jag ägnade en del tid åt att planera innan, t.ex. vilka klasser jag skulle ha 
        och vilken struktur jag skulle ha med routes och templates, t.ex. att det skulle vara en grund-template 
        där innehållet bestämdes genom att olika delar av databasen användes. Jag tycker att själva projektet 
        var lagom stort men det är väldigt många saker runt om som tar tid, t.ex. readme-filen och allt skrivande. 
        Jag ägnade även en hel del tid åt att fundera på enhetstestning på databaserna men gav upp det till slut. Stylingen av 
        webbsidan tog också en del tid eftersom jag blivit lite ringrostig sedan designkursen. Fast det var också 
        kul att arbeta med det lite mer igen.</p>
        <p>Utvärdering</p>
        <p>Den här delkursen har varit ganska rimlig när det gäller mängden innehåll. Det var bra att få två veckor på ett 
        kursmoment även om jag personligen hade behövt det på kursmoment 2 istället. Att få pröva på Symfony var 
        intressant och det känns som att det är något som används mycket "ute i verkligheten". Både enhetstestning 
        och ORM var också intressant, men det hade varit bättre att arbeta mer med en av dem. Jag hade t.ex. gärna lärt mig mer 
        om hur man kan använda ORM till mer avancerade databas-hanterande. Precis som i tidigare 
        kurser finns ganska bra möjlighet att få hjälp i discord, men jag saknar ibland genomgångar. Det finns ofta 
        genomgång av övningarna men det skulle gärna få finnas mer allmänna, förklarande föreläsningar. Jag skulle rekommendera 
        den här kursen, då det var intressant innehåll och oftast bra uppgifter och projekt. Jag ger kursen betyget 8.</p>

    </article>
    <aside class="aside">
        <ul>
            <li><a href="#kmom01">kmom01</a></li>
            <li><a href="#kmom02">kmom02</a></li>
            <li><a href="#kmom03">kmom03</a></li>
            <li><a href="#kmom04">kmom04</a></li>
            <li><a href="#kmom05">kmom05</a></li>
            <li><a href="#kmom06">kmom06</a></li>
            <li><a href="#kmom10">kmom10</a></li>
        </ul> 
    </aside>
</div>  
{% endblock %}